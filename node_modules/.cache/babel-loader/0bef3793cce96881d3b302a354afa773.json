{"ast":null,"code":"import _classCallCheck from \"C:/Users/vinay/deta.coe/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"C:/Users/vinay/deta.coe/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\n\n/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nexport var EPSILON_FLOAT32 = 1e-7;\nexport var EPSILON_FLOAT16 = 1e-4;\n/** Convenient class for storing tensor-related data. */\n\nexport var DataStorage = /*#__PURE__*/function () {\n  function DataStorage(backend, dataMover) {\n    _classCallCheck(this, DataStorage);\n\n    this.backend = backend;\n    this.dataMover = dataMover;\n    this.data = new WeakMap();\n    this.dataIdsCount = 0;\n  }\n\n  _createClass(DataStorage, [{\n    key: \"get\",\n    value: function get(dataId) {\n      if (!this.data.has(dataId)) {\n        this.dataMover.moveData(this.backend, dataId);\n      }\n\n      return this.data.get(dataId);\n    }\n  }, {\n    key: \"set\",\n    value: function set(dataId, value) {\n      this.dataIdsCount++;\n      this.data.set(dataId, value);\n    }\n  }, {\n    key: \"has\",\n    value: function has(dataId) {\n      return this.data.has(dataId);\n    }\n  }, {\n    key: \"delete\",\n    value: function _delete(dataId) {\n      this.dataIdsCount--;\n      return this.data.delete(dataId);\n    }\n  }, {\n    key: \"numDataIds\",\n    value: function numDataIds() {\n      return this.dataIdsCount;\n    }\n  }]);\n\n  return DataStorage;\n}();\n/**\n * The interface that defines the kernels that should be implemented when\n * adding a new backend. New backends don't need to implement every one of the\n * methods, this can be done gradually (throw an error for unimplemented\n * methods).\n */\n\nexport var KernelBackend = /*#__PURE__*/function () {\n  function KernelBackend() {\n    _classCallCheck(this, KernelBackend);\n  }\n\n  _createClass(KernelBackend, [{\n    key: \"decComplexRef\",\n    value:\n    /**\n     * Decrease the complex ref count for the dataId, this is useful for WebGL\n     * backend to keep the real and imag components of the complex tensor in sync\n     * with the engine. WASM and node do not have internal ref count, they will\n     * use on the default implementation.\n     * @param dataId\n     */\n    function decComplexRef(dataId) {\n      return;\n    }\n  }, {\n    key: \"time\",\n    value: function time(f) {\n      return notYetImplemented('time');\n    }\n  }, {\n    key: \"read\",\n    value: function read(dataId) {\n      return notYetImplemented('read');\n    }\n  }, {\n    key: \"readSync\",\n    value: function readSync(dataId) {\n      return notYetImplemented('readSync');\n    }\n  }, {\n    key: \"numDataIds\",\n    value: function numDataIds() {\n      return notYetImplemented('numDataIds');\n    }\n  }, {\n    key: \"disposeData\",\n    value: function disposeData(dataId) {\n      return notYetImplemented('disposeData');\n    }\n  }, {\n    key: \"write\",\n    value: function write(values, shape, dtype) {\n      return notYetImplemented('write');\n    }\n  }, {\n    key: \"move\",\n    value: function move(dataId, values, shape, dtype) {\n      return notYetImplemented('move');\n    }\n  }, {\n    key: \"memory\",\n    value: function memory() {\n      return notYetImplemented('memory');\n    }\n    /** Returns the highest precision for floats in bits (e.g. 16 or 32) */\n\n  }, {\n    key: \"floatPrecision\",\n    value: function floatPrecision() {\n      return notYetImplemented('floatPrecision');\n    }\n    /** Returns the smallest representable number.  */\n\n  }, {\n    key: \"epsilon\",\n    value: function epsilon() {\n      return this.floatPrecision() === 32 ? EPSILON_FLOAT32 : EPSILON_FLOAT16;\n    }\n  }, {\n    key: \"batchMatMul\",\n    value: function batchMatMul(a, b, transposeA, transposeB) {\n      return notYetImplemented('batchMatMul');\n    }\n  }, {\n    key: \"fusedBatchMatMul\",\n    value: function fusedBatchMatMul(_ref) {\n      var a = _ref.a,\n          b = _ref.b,\n          transposeA = _ref.transposeA,\n          transposeB = _ref.transposeB,\n          bias = _ref.bias,\n          activation = _ref.activation,\n          preluActivationWeights = _ref.preluActivationWeights;\n      return notYetImplemented('fusedBatchMatMul');\n    }\n  }, {\n    key: \"slice\",\n    value: function slice(x, begin, size) {\n      return notYetImplemented('slice');\n    }\n  }, {\n    key: \"stridedSlice\",\n    value: function stridedSlice(x, begin, end, strides) {\n      return notYetImplemented('stridedSlice');\n    }\n  }, {\n    key: \"unstack\",\n    value: function unstack(x, axis) {\n      return notYetImplemented('unstack');\n    }\n  }, {\n    key: \"reverse\",\n    value: function reverse(a, axis) {\n      return notYetImplemented('reverse');\n    }\n  }, {\n    key: \"concat\",\n    value: function concat(tensors, axis) {\n      return notYetImplemented('concat');\n    }\n  }, {\n    key: \"neg\",\n    value: function neg(a) {\n      return notYetImplemented('neg');\n    }\n  }, {\n    key: \"add\",\n    value: function add(a, b) {\n      return notYetImplemented('add');\n    }\n  }, {\n    key: \"addN\",\n    value: function addN(tensors) {\n      return notYetImplemented('addN');\n    }\n  }, {\n    key: \"subtract\",\n    value: function subtract(a, b) {\n      return notYetImplemented('subtract');\n    }\n  }, {\n    key: \"multiply\",\n    value: function multiply(a, b) {\n      return notYetImplemented('multiply');\n    }\n  }, {\n    key: \"realDivide\",\n    value: function realDivide(a, b) {\n      return notYetImplemented('realDivide');\n    }\n  }, {\n    key: \"floorDiv\",\n    value: function floorDiv(a, b) {\n      return notYetImplemented('floorDiv');\n    }\n  }, {\n    key: \"sum\",\n    value: function sum(x, axes) {\n      return notYetImplemented('sum');\n    }\n  }, {\n    key: \"prod\",\n    value: function prod(x, axes) {\n      return notYetImplemented('prod');\n    }\n  }, {\n    key: \"unsortedSegmentSum\",\n    value: function unsortedSegmentSum(x, segmentIds, numSegments) {\n      return notYetImplemented('unsortedSegmentSum');\n    }\n  }, {\n    key: \"argMin\",\n    value: function argMin(x, axis) {\n      return notYetImplemented('argMin');\n    }\n  }, {\n    key: \"argMax\",\n    value: function argMax(x, axis) {\n      return notYetImplemented('argMax');\n    }\n  }, {\n    key: \"equal\",\n    value: function equal(a, b) {\n      return notYetImplemented('equal');\n    }\n  }, {\n    key: \"notEqual\",\n    value: function notEqual(a, b) {\n      return notYetImplemented('notEqual');\n    }\n  }, {\n    key: \"less\",\n    value: function less(a, b) {\n      return notYetImplemented('less');\n    }\n  }, {\n    key: \"lessEqual\",\n    value: function lessEqual(a, b) {\n      return notYetImplemented('lessEqual');\n    }\n  }, {\n    key: \"greater\",\n    value: function greater(a, b) {\n      return notYetImplemented('greater');\n    }\n  }, {\n    key: \"greaterEqual\",\n    value: function greaterEqual(a, b) {\n      return notYetImplemented('greaterEqual');\n    }\n  }, {\n    key: \"logicalNot\",\n    value: function logicalNot(a) {\n      return notYetImplemented('logicalNot');\n    }\n  }, {\n    key: \"logicalAnd\",\n    value: function logicalAnd(a, b) {\n      return notYetImplemented('logicalAnd');\n    }\n  }, {\n    key: \"logicalOr\",\n    value: function logicalOr(a, b) {\n      return notYetImplemented('logicalOr');\n    }\n  }, {\n    key: \"where\",\n    value: function where(condition) {\n      return notYetImplemented('where');\n    }\n  }, {\n    key: \"select\",\n    value: function select(condition, a, b) {\n      return notYetImplemented('select');\n    }\n  }, {\n    key: \"topk\",\n    value: function topk(x, k, sorted) {\n      return notYetImplemented('topk');\n    }\n  }, {\n    key: \"min\",\n    value: function min(x, axes) {\n      return notYetImplemented('min');\n    }\n  }, {\n    key: \"minimum\",\n    value: function minimum(a, b) {\n      return notYetImplemented('minimum');\n    }\n  }, {\n    key: \"mod\",\n    value: function mod(a, b) {\n      return notYetImplemented('mod');\n    }\n  }, {\n    key: \"max\",\n    value: function max(x, axes) {\n      return notYetImplemented('max');\n    }\n  }, {\n    key: \"maximum\",\n    value: function maximum(a, b) {\n      return notYetImplemented('maximum');\n    }\n  }, {\n    key: \"all\",\n    value: function all(x, axes) {\n      return notYetImplemented('all');\n    }\n  }, {\n    key: \"any\",\n    value: function any(x, axes) {\n      return notYetImplemented('any');\n    }\n  }, {\n    key: \"squaredDifference\",\n    value: function squaredDifference(a, b) {\n      return notYetImplemented('squaredDifference');\n    }\n  }, {\n    key: \"ceil\",\n    value: function ceil(x) {\n      return notYetImplemented('ceil');\n    }\n  }, {\n    key: \"floor\",\n    value: function floor(x) {\n      return notYetImplemented('floor');\n    }\n  }, {\n    key: \"round\",\n    value: function round(x) {\n      return notYetImplemented('round');\n    }\n  }, {\n    key: \"sign\",\n    value: function sign(x) {\n      return notYetImplemented('sign');\n    }\n  }, {\n    key: \"isNaN\",\n    value: function isNaN(x) {\n      return notYetImplemented('isNaN');\n    }\n  }, {\n    key: \"isInf\",\n    value: function isInf(x) {\n      return notYetImplemented('isInf');\n    }\n  }, {\n    key: \"isFinite\",\n    value: function isFinite(x) {\n      return notYetImplemented('isFinite');\n    }\n  }, {\n    key: \"pow\",\n    value: function pow(a, b) {\n      return notYetImplemented('pow');\n    }\n  }, {\n    key: \"exp\",\n    value: function exp(x) {\n      return notYetImplemented('exp');\n    }\n  }, {\n    key: \"expm1\",\n    value: function expm1(x) {\n      return notYetImplemented('expm1');\n    }\n  }, {\n    key: \"softmax\",\n    value: function softmax(x, dim) {\n      return notYetImplemented('softmax');\n    }\n  }, {\n    key: \"log\",\n    value: function log(x) {\n      return notYetImplemented('log');\n    }\n  }, {\n    key: \"log1p\",\n    value: function log1p(x) {\n      return notYetImplemented('log1p');\n    }\n  }, {\n    key: \"sqrt\",\n    value: function sqrt(x) {\n      return notYetImplemented('sqrt');\n    }\n  }, {\n    key: \"rsqrt\",\n    value: function rsqrt(x) {\n      return notYetImplemented('rsqrt');\n    }\n  }, {\n    key: \"square\",\n    value: function square(x) {\n      return notYetImplemented('square');\n    }\n  }, {\n    key: \"reciprocal\",\n    value: function reciprocal(x) {\n      return notYetImplemented('reciprocal');\n    }\n  }, {\n    key: \"relu\",\n    value: function relu(x) {\n      return notYetImplemented('relu');\n    }\n  }, {\n    key: \"relu6\",\n    value: function relu6(x) {\n      return notYetImplemented('relu6');\n    }\n  }, {\n    key: \"prelu\",\n    value: function prelu(x, a) {\n      return notYetImplemented('prelu');\n    }\n  }, {\n    key: \"elu\",\n    value: function elu(x) {\n      return notYetImplemented('elu');\n    }\n  }, {\n    key: \"eluDer\",\n    value: function eluDer(dy, y) {\n      return notYetImplemented('eluDer');\n    }\n  }, {\n    key: \"selu\",\n    value: function selu(x) {\n      return notYetImplemented('selu');\n    }\n  }, {\n    key: \"int\",\n    value: function int(x) {\n      return notYetImplemented('int');\n    }\n  }, {\n    key: \"clip\",\n    value: function clip(x, min, max) {\n      return notYetImplemented('clip');\n    }\n  }, {\n    key: \"abs\",\n    value: function abs(x) {\n      return notYetImplemented('abs');\n    }\n  }, {\n    key: \"complexAbs\",\n    value: function complexAbs(x) {\n      return notYetImplemented('complexAbs');\n    }\n  }, {\n    key: \"sigmoid\",\n    value: function sigmoid(x) {\n      return notYetImplemented('sigmoid');\n    }\n  }, {\n    key: \"softplus\",\n    value: function softplus(x) {\n      return notYetImplemented('softplus');\n    }\n  }, {\n    key: \"sin\",\n    value: function sin(x) {\n      return notYetImplemented('sin');\n    }\n  }, {\n    key: \"cos\",\n    value: function cos(x) {\n      return notYetImplemented('cos');\n    }\n  }, {\n    key: \"tan\",\n    value: function tan(x) {\n      return notYetImplemented('tan');\n    }\n  }, {\n    key: \"asin\",\n    value: function asin(x) {\n      return notYetImplemented('asin');\n    }\n  }, {\n    key: \"acos\",\n    value: function acos(x) {\n      return notYetImplemented('acos');\n    }\n  }, {\n    key: \"atan\",\n    value: function atan(x) {\n      return notYetImplemented('atan');\n    }\n  }, {\n    key: \"atan2\",\n    value: function atan2(a, b) {\n      return notYetImplemented('atan2');\n    }\n  }, {\n    key: \"sinh\",\n    value: function sinh(x) {\n      return notYetImplemented('sinh');\n    }\n  }, {\n    key: \"cosh\",\n    value: function cosh(x) {\n      return notYetImplemented('cosh');\n    }\n  }, {\n    key: \"tanh\",\n    value: function tanh(x) {\n      return notYetImplemented('tanh');\n    }\n  }, {\n    key: \"asinh\",\n    value: function asinh(x) {\n      return notYetImplemented('asinh');\n    }\n  }, {\n    key: \"acosh\",\n    value: function acosh(x) {\n      return notYetImplemented('acosh');\n    }\n  }, {\n    key: \"atanh\",\n    value: function atanh(x) {\n      return notYetImplemented('atanh');\n    }\n  }, {\n    key: \"erf\",\n    value: function erf(x) {\n      return notYetImplemented('erf');\n    }\n  }, {\n    key: \"step\",\n    value: function step(x, alpha) {\n      return notYetImplemented('step');\n    }\n  }, {\n    key: \"fusedConv2d\",\n    value: function fusedConv2d(_ref2) {\n      var input = _ref2.input,\n          filter = _ref2.filter,\n          convInfo = _ref2.convInfo,\n          bias = _ref2.bias,\n          activation = _ref2.activation,\n          preluActivationWeights = _ref2.preluActivationWeights;\n      return notYetImplemented('fusedConv2d');\n    }\n  }, {\n    key: \"conv2d\",\n    value: function conv2d(x, filter, convInfo) {\n      return notYetImplemented('conv2d');\n    }\n  }, {\n    key: \"conv2dDerInput\",\n    value: function conv2dDerInput(dy, filter, convInfo) {\n      return notYetImplemented('conv2dDerInput');\n    }\n  }, {\n    key: \"conv2dDerFilter\",\n    value: function conv2dDerFilter(x, dY, convInfo) {\n      return notYetImplemented('conv2dDerFilter');\n    }\n  }, {\n    key: \"fusedDepthwiseConv2D\",\n    value: function fusedDepthwiseConv2D(_ref3) {\n      var input = _ref3.input,\n          filter = _ref3.filter,\n          convInfo = _ref3.convInfo,\n          bias = _ref3.bias,\n          activation = _ref3.activation,\n          preluActivationWeights = _ref3.preluActivationWeights;\n      return notYetImplemented('fusedDepthwiseConv2D');\n    }\n  }, {\n    key: \"depthwiseConv2D\",\n    value: function depthwiseConv2D(input, filter, convInfo) {\n      return notYetImplemented('depthwiseConv2D');\n    }\n  }, {\n    key: \"depthwiseConv2DDerInput\",\n    value: function depthwiseConv2DDerInput(dy, filter, convInfo) {\n      return notYetImplemented('depthwiseConv2DDerInput');\n    }\n  }, {\n    key: \"depthwiseConv2DDerFilter\",\n    value: function depthwiseConv2DDerFilter(x, dY, convInfo) {\n      return notYetImplemented('depthwiseConv2DDerFilter');\n    }\n  }, {\n    key: \"conv3d\",\n    value: function conv3d(x, filter, convInfo) {\n      return notYetImplemented('conv3d');\n    }\n  }, {\n    key: \"conv3dDerInput\",\n    value: function conv3dDerInput(dy, filter, convInfo) {\n      return notYetImplemented('conv3dDerInput');\n    }\n  }, {\n    key: \"conv3dDerFilter\",\n    value: function conv3dDerFilter(x, dY, convInfo) {\n      return notYetImplemented('conv3dDerFilter');\n    }\n  }, {\n    key: \"maxPool\",\n    value: function maxPool(x, convInfo) {\n      return notYetImplemented('maxPool');\n    }\n  }, {\n    key: \"maxPoolBackprop\",\n    value: function maxPoolBackprop(dy, x, y, convInfo) {\n      return notYetImplemented('maxPoolBackprop');\n    }\n  }, {\n    key: \"avgPool\",\n    value: function avgPool(x, convInfo) {\n      return notYetImplemented('avgPool');\n    }\n  }, {\n    key: \"avgPoolBackprop\",\n    value: function avgPoolBackprop(dy, x, convInfo) {\n      return notYetImplemented('avgPoolBackprop');\n    }\n  }, {\n    key: \"avgPool3d\",\n    value: function avgPool3d(x, convInfo) {\n      return notYetImplemented('avgPool3d');\n    }\n  }, {\n    key: \"avgPool3dBackprop\",\n    value: function avgPool3dBackprop(dy, x, convInfo) {\n      return notYetImplemented('avgPool3dBackprop');\n    }\n  }, {\n    key: \"maxPool3d\",\n    value: function maxPool3d(x, convInfo) {\n      return notYetImplemented('maxPool3d');\n    }\n  }, {\n    key: \"maxPool3dBackprop\",\n    value: function maxPool3dBackprop(dy, x, y, convInfo) {\n      return notYetImplemented('maxPool3dBackprop');\n    }\n  }, {\n    key: \"reshape\",\n    value: function reshape(x, shape) {\n      return notYetImplemented('reshape');\n    }\n  }, {\n    key: \"cast\",\n    value: function cast(x, dtype) {\n      return notYetImplemented('cast');\n    }\n  }, {\n    key: \"tile\",\n    value: function tile(x, reps) {\n      return notYetImplemented('tile');\n    }\n  }, {\n    key: \"pad\",\n    value: function pad(x, paddings, constantValue) {\n      return notYetImplemented('pad');\n    }\n  }, {\n    key: \"transpose\",\n    value: function transpose(x, perm) {\n      return notYetImplemented('transpose');\n    }\n  }, {\n    key: \"gather\",\n    value: function gather(x, indices, axis) {\n      var batchDims = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 0;\n      return notYetImplemented('gather');\n    }\n  }, {\n    key: \"gatherND\",\n    value: function gatherND(x, indices) {\n      return notYetImplemented('gatherND');\n    }\n  }, {\n    key: \"scatterND\",\n    value: function scatterND(indices, updates, shape) {\n      return notYetImplemented('scatterND');\n    }\n  }, {\n    key: \"batchToSpaceND\",\n    value: function batchToSpaceND(x, blockShape, crops) {\n      return notYetImplemented('batchToSpaceND');\n    }\n  }, {\n    key: \"spaceToBatchND\",\n    value: function spaceToBatchND(x, blockShape, paddings) {\n      return notYetImplemented('spaceToBatchND');\n    }\n  }, {\n    key: \"resizeBilinear\",\n    value: function resizeBilinear(x, newHeight, newWidth, alignCorners, halfPixelCenters) {\n      return notYetImplemented('resizeBilinear');\n    }\n  }, {\n    key: \"resizeBilinearBackprop\",\n    value: function resizeBilinearBackprop(dy, x, alignCorners) {\n      return notYetImplemented('resizeBilinearBackprop');\n    }\n  }, {\n    key: \"resizeNearestNeighbor\",\n    value: function resizeNearestNeighbor(x, newHEight, newWidth, alignCorners, halfPixelCenters) {\n      return notYetImplemented('resizeNearestNeighbor');\n    }\n  }, {\n    key: \"resizeNearestNeighborBackprop\",\n    value: function resizeNearestNeighborBackprop(dy, x, alignCorners) {\n      return notYetImplemented('resizeNearestNeighborBackprop');\n    }\n  }, {\n    key: \"batchNorm\",\n    value: function batchNorm(x, mean, variance, offset, scale, varianceEpsilon) {\n      return notYetImplemented('batchNorm');\n    }\n  }, {\n    key: \"localResponseNormalization4D\",\n    value: function localResponseNormalization4D(x, radius, bias, alpha, beta) {\n      return notYetImplemented('localResponseNormalization4D');\n    }\n  }, {\n    key: \"LRNGrad\",\n    value: function LRNGrad(dy, inputImage, outputImage, radius, bias, alpha, beta) {\n      return notYetImplemented('LRNGrad');\n    }\n  }, {\n    key: \"multinomial\",\n    value: function multinomial(logits, normalized, numSamples, seed) {\n      return notYetImplemented('multinomial');\n    }\n  }, {\n    key: \"oneHot\",\n    value: function oneHot(indices, depth, onValue, offValue) {\n      return notYetImplemented('oneHot');\n    }\n  }, {\n    key: \"cumsum\",\n    value: function cumsum(x, axis, exclusive, reverse) {\n      return notYetImplemented('cumsum');\n    }\n  }, {\n    key: \"nonMaxSuppression\",\n    value: function nonMaxSuppression(boxes, scores, maxOutputSize, iouThreshold, scoreThreshold) {\n      return notYetImplemented('nonMaxSuppression');\n    }\n  }, {\n    key: \"fft\",\n    value: function fft(x) {\n      return notYetImplemented('fft');\n    }\n  }, {\n    key: \"ifft\",\n    value: function ifft(x) {\n      return notYetImplemented('ifft');\n    }\n  }, {\n    key: \"complex\",\n    value: function complex(real, imag) {\n      return notYetImplemented('complex');\n    }\n  }, {\n    key: \"real\",\n    value: function real(input) {\n      return notYetImplemented('real');\n    }\n  }, {\n    key: \"imag\",\n    value: function imag(input) {\n      return notYetImplemented('imag');\n    }\n  }, {\n    key: \"cropAndResize\",\n    value: function cropAndResize(image, boxes, boxIndex, cropSize, method, extrapolationValue) {\n      return notYetImplemented('cropAndResize');\n    }\n  }, {\n    key: \"depthToSpace\",\n    value: function depthToSpace(x, blockSize, dataFormat) {\n      return notYetImplemented('depthToSpace');\n    } // Aligns with the \"SplitV\" kernel in TensorFlow.\n\n  }, {\n    key: \"split\",\n    value: function split(value, sizeSplits, axis) {\n      return notYetImplemented('split');\n    }\n  }, {\n    key: \"sparseToDense\",\n    value: function sparseToDense(sparseIndices, sparseValues, outputShape, defaultValue) {\n      return notYetImplemented('sparseToDense');\n    }\n  }, {\n    key: \"diag\",\n    value: function diag(x) {\n      return notYetImplemented('diag');\n    }\n  }, {\n    key: \"fill\",\n    value: function fill(shape, value, dtype) {\n      return notYetImplemented('fill');\n    }\n  }, {\n    key: \"onesLike\",\n    value: function onesLike(x) {\n      return notYetImplemented('onesLike');\n    }\n  }, {\n    key: \"zerosLike\",\n    value: function zerosLike(x) {\n      return notYetImplemented('zerosLike');\n    }\n  }, {\n    key: \"linspace\",\n    value: function linspace(start, stop, num) {\n      return notYetImplemented('linspace');\n    }\n  }, {\n    key: \"dispose\",\n    value: function dispose() {\n      return notYetImplemented('dispose');\n    }\n  }]);\n\n  return KernelBackend;\n}();\n\nfunction notYetImplemented(kernelName) {\n  throw new Error(\"'\".concat(kernelName, \"' not yet implemented or not found in the registry. \") + \"This kernel may not be supported by the tfjs backend you have chosen\");\n}","map":{"version":3,"sources":["../../src/backends/backend.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nexport const EPSILON_FLOAT32 = 1e-7;\nexport const EPSILON_FLOAT16 = 1e-4;\n/** Convenient class for storing tensor-related data. */\nexport class DataStorage {\n    constructor(backend, dataMover) {\n        this.backend = backend;\n        this.dataMover = dataMover;\n        this.data = new WeakMap();\n        this.dataIdsCount = 0;\n    }\n    get(dataId) {\n        if (!this.data.has(dataId)) {\n            this.dataMover.moveData(this.backend, dataId);\n        }\n        return this.data.get(dataId);\n    }\n    set(dataId, value) {\n        this.dataIdsCount++;\n        this.data.set(dataId, value);\n    }\n    has(dataId) {\n        return this.data.has(dataId);\n    }\n    delete(dataId) {\n        this.dataIdsCount--;\n        return this.data.delete(dataId);\n    }\n    numDataIds() {\n        return this.dataIdsCount;\n    }\n}\n/**\n * The interface that defines the kernels that should be implemented when\n * adding a new backend. New backends don't need to implement every one of the\n * methods, this can be done gradually (throw an error for unimplemented\n * methods).\n */\nexport class KernelBackend {\n    /**\n     * Decrease the complex ref count for the dataId, this is useful for WebGL\n     * backend to keep the real and imag components of the complex tensor in sync\n     * with the engine. WASM and node do not have internal ref count, they will\n     * use on the default implementation.\n     * @param dataId\n     */\n    decComplexRef(dataId) {\n        return;\n    }\n    time(f) {\n        return notYetImplemented('time');\n    }\n    read(dataId) {\n        return notYetImplemented('read');\n    }\n    readSync(dataId) {\n        return notYetImplemented('readSync');\n    }\n    numDataIds() {\n        return notYetImplemented('numDataIds');\n    }\n    disposeData(dataId) {\n        return notYetImplemented('disposeData');\n    }\n    write(values, shape, dtype) {\n        return notYetImplemented('write');\n    }\n    move(dataId, values, shape, dtype) {\n        return notYetImplemented('move');\n    }\n    memory() {\n        return notYetImplemented('memory');\n    }\n    /** Returns the highest precision for floats in bits (e.g. 16 or 32) */\n    floatPrecision() {\n        return notYetImplemented('floatPrecision');\n    }\n    /** Returns the smallest representable number.  */\n    epsilon() {\n        return this.floatPrecision() === 32 ? EPSILON_FLOAT32 : EPSILON_FLOAT16;\n    }\n    batchMatMul(a, b, transposeA, transposeB) {\n        return notYetImplemented('batchMatMul');\n    }\n    fusedBatchMatMul({ a, b, transposeA, transposeB, bias, activation, preluActivationWeights }) {\n        return notYetImplemented('fusedBatchMatMul');\n    }\n    slice(x, begin, size) {\n        return notYetImplemented('slice');\n    }\n    stridedSlice(x, begin, end, strides) {\n        return notYetImplemented('stridedSlice');\n    }\n    unstack(x, axis) {\n        return notYetImplemented('unstack');\n    }\n    reverse(a, axis) {\n        return notYetImplemented('reverse');\n    }\n    concat(tensors, axis) {\n        return notYetImplemented('concat');\n    }\n    neg(a) {\n        return notYetImplemented('neg');\n    }\n    add(a, b) {\n        return notYetImplemented('add');\n    }\n    addN(tensors) {\n        return notYetImplemented('addN');\n    }\n    subtract(a, b) {\n        return notYetImplemented('subtract');\n    }\n    multiply(a, b) {\n        return notYetImplemented('multiply');\n    }\n    realDivide(a, b) {\n        return notYetImplemented('realDivide');\n    }\n    floorDiv(a, b) {\n        return notYetImplemented('floorDiv');\n    }\n    sum(x, axes) {\n        return notYetImplemented('sum');\n    }\n    prod(x, axes) {\n        return notYetImplemented('prod');\n    }\n    unsortedSegmentSum(x, segmentIds, numSegments) {\n        return notYetImplemented('unsortedSegmentSum');\n    }\n    argMin(x, axis) {\n        return notYetImplemented('argMin');\n    }\n    argMax(x, axis) {\n        return notYetImplemented('argMax');\n    }\n    equal(a, b) {\n        return notYetImplemented('equal');\n    }\n    notEqual(a, b) {\n        return notYetImplemented('notEqual');\n    }\n    less(a, b) {\n        return notYetImplemented('less');\n    }\n    lessEqual(a, b) {\n        return notYetImplemented('lessEqual');\n    }\n    greater(a, b) {\n        return notYetImplemented('greater');\n    }\n    greaterEqual(a, b) {\n        return notYetImplemented('greaterEqual');\n    }\n    logicalNot(a) {\n        return notYetImplemented('logicalNot');\n    }\n    logicalAnd(a, b) {\n        return notYetImplemented('logicalAnd');\n    }\n    logicalOr(a, b) {\n        return notYetImplemented('logicalOr');\n    }\n    where(condition) {\n        return notYetImplemented('where');\n    }\n    select(condition, a, b) {\n        return notYetImplemented('select');\n    }\n    topk(x, k, sorted) {\n        return notYetImplemented('topk');\n    }\n    min(x, axes) {\n        return notYetImplemented('min');\n    }\n    minimum(a, b) {\n        return notYetImplemented('minimum');\n    }\n    mod(a, b) {\n        return notYetImplemented('mod');\n    }\n    max(x, axes) {\n        return notYetImplemented('max');\n    }\n    maximum(a, b) {\n        return notYetImplemented('maximum');\n    }\n    all(x, axes) {\n        return notYetImplemented('all');\n    }\n    any(x, axes) {\n        return notYetImplemented('any');\n    }\n    squaredDifference(a, b) {\n        return notYetImplemented('squaredDifference');\n    }\n    ceil(x) {\n        return notYetImplemented('ceil');\n    }\n    floor(x) {\n        return notYetImplemented('floor');\n    }\n    round(x) {\n        return notYetImplemented('round');\n    }\n    sign(x) {\n        return notYetImplemented('sign');\n    }\n    isNaN(x) {\n        return notYetImplemented('isNaN');\n    }\n    isInf(x) {\n        return notYetImplemented('isInf');\n    }\n    isFinite(x) {\n        return notYetImplemented('isFinite');\n    }\n    pow(a, b) {\n        return notYetImplemented('pow');\n    }\n    exp(x) {\n        return notYetImplemented('exp');\n    }\n    expm1(x) {\n        return notYetImplemented('expm1');\n    }\n    softmax(x, dim) {\n        return notYetImplemented('softmax');\n    }\n    log(x) {\n        return notYetImplemented('log');\n    }\n    log1p(x) {\n        return notYetImplemented('log1p');\n    }\n    sqrt(x) {\n        return notYetImplemented('sqrt');\n    }\n    rsqrt(x) {\n        return notYetImplemented('rsqrt');\n    }\n    square(x) {\n        return notYetImplemented('square');\n    }\n    reciprocal(x) {\n        return notYetImplemented('reciprocal');\n    }\n    relu(x) {\n        return notYetImplemented('relu');\n    }\n    relu6(x) {\n        return notYetImplemented('relu6');\n    }\n    prelu(x, a) {\n        return notYetImplemented('prelu');\n    }\n    elu(x) {\n        return notYetImplemented('elu');\n    }\n    eluDer(dy, y) {\n        return notYetImplemented('eluDer');\n    }\n    selu(x) {\n        return notYetImplemented('selu');\n    }\n    int(x) {\n        return notYetImplemented('int');\n    }\n    clip(x, min, max) {\n        return notYetImplemented('clip');\n    }\n    abs(x) {\n        return notYetImplemented('abs');\n    }\n    complexAbs(x) {\n        return notYetImplemented('complexAbs');\n    }\n    sigmoid(x) {\n        return notYetImplemented('sigmoid');\n    }\n    softplus(x) {\n        return notYetImplemented('softplus');\n    }\n    sin(x) {\n        return notYetImplemented('sin');\n    }\n    cos(x) {\n        return notYetImplemented('cos');\n    }\n    tan(x) {\n        return notYetImplemented('tan');\n    }\n    asin(x) {\n        return notYetImplemented('asin');\n    }\n    acos(x) {\n        return notYetImplemented('acos');\n    }\n    atan(x) {\n        return notYetImplemented('atan');\n    }\n    atan2(a, b) {\n        return notYetImplemented('atan2');\n    }\n    sinh(x) {\n        return notYetImplemented('sinh');\n    }\n    cosh(x) {\n        return notYetImplemented('cosh');\n    }\n    tanh(x) {\n        return notYetImplemented('tanh');\n    }\n    asinh(x) {\n        return notYetImplemented('asinh');\n    }\n    acosh(x) {\n        return notYetImplemented('acosh');\n    }\n    atanh(x) {\n        return notYetImplemented('atanh');\n    }\n    erf(x) {\n        return notYetImplemented('erf');\n    }\n    step(x, alpha) {\n        return notYetImplemented('step');\n    }\n    fusedConv2d({ input, filter, convInfo, bias, activation, preluActivationWeights }) {\n        return notYetImplemented('fusedConv2d');\n    }\n    conv2d(x, filter, convInfo) {\n        return notYetImplemented('conv2d');\n    }\n    conv2dDerInput(dy, filter, convInfo) {\n        return notYetImplemented('conv2dDerInput');\n    }\n    conv2dDerFilter(x, dY, convInfo) {\n        return notYetImplemented('conv2dDerFilter');\n    }\n    fusedDepthwiseConv2D({ input, filter, convInfo, bias, activation, preluActivationWeights }) {\n        return notYetImplemented('fusedDepthwiseConv2D');\n    }\n    depthwiseConv2D(input, filter, convInfo) {\n        return notYetImplemented('depthwiseConv2D');\n    }\n    depthwiseConv2DDerInput(dy, filter, convInfo) {\n        return notYetImplemented('depthwiseConv2DDerInput');\n    }\n    depthwiseConv2DDerFilter(x, dY, convInfo) {\n        return notYetImplemented('depthwiseConv2DDerFilter');\n    }\n    conv3d(x, filter, convInfo) {\n        return notYetImplemented('conv3d');\n    }\n    conv3dDerInput(dy, filter, convInfo) {\n        return notYetImplemented('conv3dDerInput');\n    }\n    conv3dDerFilter(x, dY, convInfo) {\n        return notYetImplemented('conv3dDerFilter');\n    }\n    maxPool(x, convInfo) {\n        return notYetImplemented('maxPool');\n    }\n    maxPoolBackprop(dy, x, y, convInfo) {\n        return notYetImplemented('maxPoolBackprop');\n    }\n    avgPool(x, convInfo) {\n        return notYetImplemented('avgPool');\n    }\n    avgPoolBackprop(dy, x, convInfo) {\n        return notYetImplemented('avgPoolBackprop');\n    }\n    avgPool3d(x, convInfo) {\n        return notYetImplemented('avgPool3d');\n    }\n    avgPool3dBackprop(dy, x, convInfo) {\n        return notYetImplemented('avgPool3dBackprop');\n    }\n    maxPool3d(x, convInfo) {\n        return notYetImplemented('maxPool3d');\n    }\n    maxPool3dBackprop(dy, x, y, convInfo) {\n        return notYetImplemented('maxPool3dBackprop');\n    }\n    reshape(x, shape) {\n        return notYetImplemented('reshape');\n    }\n    cast(x, dtype) {\n        return notYetImplemented('cast');\n    }\n    tile(x, reps) {\n        return notYetImplemented('tile');\n    }\n    pad(x, paddings, constantValue) {\n        return notYetImplemented('pad');\n    }\n    transpose(x, perm) {\n        return notYetImplemented('transpose');\n    }\n    gather(x, indices, axis, batchDims = 0) {\n        return notYetImplemented('gather');\n    }\n    gatherND(x, indices) {\n        return notYetImplemented('gatherND');\n    }\n    scatterND(indices, updates, shape) {\n        return notYetImplemented('scatterND');\n    }\n    batchToSpaceND(x, blockShape, crops) {\n        return notYetImplemented('batchToSpaceND');\n    }\n    spaceToBatchND(x, blockShape, paddings) {\n        return notYetImplemented('spaceToBatchND');\n    }\n    resizeBilinear(x, newHeight, newWidth, alignCorners, halfPixelCenters) {\n        return notYetImplemented('resizeBilinear');\n    }\n    resizeBilinearBackprop(dy, x, alignCorners) {\n        return notYetImplemented('resizeBilinearBackprop');\n    }\n    resizeNearestNeighbor(x, newHEight, newWidth, alignCorners, halfPixelCenters) {\n        return notYetImplemented('resizeNearestNeighbor');\n    }\n    resizeNearestNeighborBackprop(dy, x, alignCorners) {\n        return notYetImplemented('resizeNearestNeighborBackprop');\n    }\n    batchNorm(x, mean, variance, offset, scale, varianceEpsilon) {\n        return notYetImplemented('batchNorm');\n    }\n    localResponseNormalization4D(x, radius, bias, alpha, beta) {\n        return notYetImplemented('localResponseNormalization4D');\n    }\n    LRNGrad(dy, inputImage, outputImage, radius, bias, alpha, beta) {\n        return notYetImplemented('LRNGrad');\n    }\n    multinomial(logits, normalized, numSamples, seed) {\n        return notYetImplemented('multinomial');\n    }\n    oneHot(indices, depth, onValue, offValue) {\n        return notYetImplemented('oneHot');\n    }\n    cumsum(x, axis, exclusive, reverse) {\n        return notYetImplemented('cumsum');\n    }\n    nonMaxSuppression(boxes, scores, maxOutputSize, iouThreshold, scoreThreshold) {\n        return notYetImplemented('nonMaxSuppression');\n    }\n    fft(x) {\n        return notYetImplemented('fft');\n    }\n    ifft(x) {\n        return notYetImplemented('ifft');\n    }\n    complex(real, imag) {\n        return notYetImplemented('complex');\n    }\n    real(input) {\n        return notYetImplemented('real');\n    }\n    imag(input) {\n        return notYetImplemented('imag');\n    }\n    cropAndResize(image, boxes, boxIndex, cropSize, method, extrapolationValue) {\n        return notYetImplemented('cropAndResize');\n    }\n    depthToSpace(x, blockSize, dataFormat) {\n        return notYetImplemented('depthToSpace');\n    }\n    // Aligns with the \"SplitV\" kernel in TensorFlow.\n    split(value, sizeSplits, axis) {\n        return notYetImplemented('split');\n    }\n    sparseToDense(sparseIndices, sparseValues, outputShape, defaultValue) {\n        return notYetImplemented('sparseToDense');\n    }\n    diag(x) {\n        return notYetImplemented('diag');\n    }\n    fill(shape, value, dtype) {\n        return notYetImplemented('fill');\n    }\n    onesLike(x) {\n        return notYetImplemented('onesLike');\n    }\n    zerosLike(x) {\n        return notYetImplemented('zerosLike');\n    }\n    linspace(start, stop, num) {\n        return notYetImplemented('linspace');\n    }\n    dispose() {\n        return notYetImplemented('dispose');\n    }\n}\nfunction notYetImplemented(kernelName) {\n    throw new Error(`'${kernelName}' not yet implemented or not found in the registry. ` +\n        `This kernel may not be supported by the tfjs backend you have chosen`);\n}\n//# sourceMappingURL=backend.js.map"]},"metadata":{},"sourceType":"module"}